/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.fretron.driverManager.model;
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Driver extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Driver\",\"namespace\":\"com.fretron.driverManager.models\",\"fields\":[{\"name\":\"uuid\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"licenseId\",\"type\":\"string\"},{\"name\":\"associatedVehicleId\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"eventType\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence uuid;
  @Deprecated public java.lang.CharSequence name;
  @Deprecated public java.lang.CharSequence licenseId;
  @Deprecated public java.lang.CharSequence associatedVehicleId;
  @Deprecated public java.lang.CharSequence eventType;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Driver() {}

  /**
   * All-args constructor.
   */
  public Driver(java.lang.CharSequence uuid, java.lang.CharSequence name, java.lang.CharSequence licenseId, java.lang.CharSequence associatedVehicleId, java.lang.CharSequence eventType) {
    this.uuid = uuid;
    this.name = name;
    this.licenseId = licenseId;
    this.associatedVehicleId = associatedVehicleId;
    this.eventType = eventType;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uuid;
    case 1: return name;
    case 2: return licenseId;
    case 3: return associatedVehicleId;
    case 4: return eventType;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uuid = (java.lang.CharSequence)value$; break;
    case 1: name = (java.lang.CharSequence)value$; break;
    case 2: licenseId = (java.lang.CharSequence)value$; break;
    case 3: associatedVehicleId = (java.lang.CharSequence)value$; break;
    case 4: eventType = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'uuid' field.
   */
  public java.lang.CharSequence getUuid() {
    return uuid;
  }

  /**
   * Sets the value of the 'uuid' field.
   * @param value the value to set.
   */
  public void setUuid(java.lang.CharSequence value) {
    this.uuid = value;
  }

  /**
   * Gets the value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'licenseId' field.
   */
  public java.lang.CharSequence getLicenseId() {
    return licenseId;
  }

  /**
   * Sets the value of the 'licenseId' field.
   * @param value the value to set.
   */
  public void setLicenseId(java.lang.CharSequence value) {
    this.licenseId = value;
  }

  /**
   * Gets the value of the 'associatedVehicleId' field.
   */
  public java.lang.CharSequence getAssociatedVehicleId() {
    return associatedVehicleId;
  }

  /**
   * Sets the value of the 'associatedVehicleId' field.
   * @param value the value to set.
   */
  public void setAssociatedVehicleId(java.lang.CharSequence value) {
    this.associatedVehicleId = value;
  }

  /**
   * Gets the value of the 'eventType' field.
   */
  public java.lang.CharSequence getEventType() {
    return eventType;
  }

  /**
   * Sets the value of the 'eventType' field.
   * @param value the value to set.
   */
  public void setEventType(java.lang.CharSequence value) {
    this.eventType = value;
  }

  /** Creates a new Driver RecordBuilder */
  public static com.fretron.driverManager.model.Driver.Builder newBuilder() {
    return new com.fretron.driverManager.model.Driver.Builder();
  }
  
  /** Creates a new Driver RecordBuilder by copying an existing Builder */
  public static com.fretron.driverManager.model.Driver.Builder newBuilder(com.fretron.driverManager.model.Driver.Builder other) {
    return new com.fretron.driverManager.model.Driver.Builder(other);
  }
  
  /** Creates a new Driver RecordBuilder by copying an existing Driver instance */
  public static com.fretron.driverManager.model.Driver.Builder newBuilder(com.fretron.driverManager.model.Driver other) {
    return new com.fretron.driverManager.model.Driver.Builder(other);
  }
  
  /**
   * RecordBuilder for Driver instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Driver>
    implements org.apache.avro.data.RecordBuilder<Driver> {

    private java.lang.CharSequence uuid;
    private java.lang.CharSequence name;
    private java.lang.CharSequence licenseId;
    private java.lang.CharSequence associatedVehicleId;
    private java.lang.CharSequence eventType;

    /** Creates a new Builder */
    private Builder() {
      super(com.fretron.driverManager.model.Driver.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.fretron.driverManager.model.Driver.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.licenseId)) {
        this.licenseId = data().deepCopy(fields()[2].schema(), other.licenseId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.associatedVehicleId)) {
        this.associatedVehicleId = data().deepCopy(fields()[3].schema(), other.associatedVehicleId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.eventType)) {
        this.eventType = data().deepCopy(fields()[4].schema(), other.eventType);
        fieldSetFlags()[4] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Driver instance */
    private Builder(com.fretron.driverManager.model.Driver other) {
            super(com.fretron.driverManager.model.Driver.SCHEMA$);
      if (isValidValue(fields()[0], other.uuid)) {
        this.uuid = data().deepCopy(fields()[0].schema(), other.uuid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.licenseId)) {
        this.licenseId = data().deepCopy(fields()[2].schema(), other.licenseId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.associatedVehicleId)) {
        this.associatedVehicleId = data().deepCopy(fields()[3].schema(), other.associatedVehicleId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.eventType)) {
        this.eventType = data().deepCopy(fields()[4].schema(), other.eventType);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'uuid' field */
    public java.lang.CharSequence getUuid() {
      return uuid;
    }
    
    /** Sets the value of the 'uuid' field */
    public com.fretron.driverManager.model.Driver.Builder setUuid(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.uuid = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'uuid' field has been set */
    public boolean hasUuid() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'uuid' field */
    public com.fretron.driverManager.model.Driver.Builder clearUuid() {
      uuid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'name' field */
    public java.lang.CharSequence getName() {
      return name;
    }
    
    /** Sets the value of the 'name' field */
    public com.fretron.driverManager.model.Driver.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'name' field has been set */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'name' field */
    public com.fretron.driverManager.model.Driver.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'licenseId' field */
    public java.lang.CharSequence getLicenseId() {
      return licenseId;
    }
    
    /** Sets the value of the 'licenseId' field */
    public com.fretron.driverManager.model.Driver.Builder setLicenseId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.licenseId = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'licenseId' field has been set */
    public boolean hasLicenseId() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'licenseId' field */
    public com.fretron.driverManager.model.Driver.Builder clearLicenseId() {
      licenseId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'associatedVehicleId' field */
    public java.lang.CharSequence getAssociatedVehicleId() {
      return associatedVehicleId;
    }
    
    /** Sets the value of the 'associatedVehicleId' field */
    public com.fretron.driverManager.model.Driver.Builder setAssociatedVehicleId(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.associatedVehicleId = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'associatedVehicleId' field has been set */
    public boolean hasAssociatedVehicleId() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'associatedVehicleId' field */
    public com.fretron.driverManager.model.Driver.Builder clearAssociatedVehicleId() {
      associatedVehicleId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'eventType' field */
    public java.lang.CharSequence getEventType() {
      return eventType;
    }
    
    /** Sets the value of the 'eventType' field */
    public com.fretron.driverManager.model.Driver.Builder setEventType(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.eventType = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'eventType' field has been set */
    public boolean hasEventType() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'eventType' field */
    public com.fretron.driverManager.model.Driver.Builder clearEventType() {
      eventType = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public Driver build() {
      try {
        Driver record = new Driver();
        record.uuid = fieldSetFlags()[0] ? this.uuid : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.licenseId = fieldSetFlags()[2] ? this.licenseId : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.associatedVehicleId = fieldSetFlags()[3] ? this.associatedVehicleId : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.eventType = fieldSetFlags()[4] ? this.eventType : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
